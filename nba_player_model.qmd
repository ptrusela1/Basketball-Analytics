---
title: "Basketball Analytics"
format: html
---


```{python}
pip install requests beautifulsoup4 pandas
```

```{python}
import pandas as pd

merged_data = pd.read_csv('2425_merged_data.csv')
print(merged_data)
```


```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
numerical_cols = merged_data.select_dtypes(include=['float64', 'int64']).columns
fig, axes = plt.subplots(nrows=(len(numerical_cols) // 4) + 1, ncols=4, figsize=(16, (len(numerical_cols) // 4 + 1) * 5))
axes = axes.flatten()

for i, col in enumerate(numerical_cols):
    sns.histplot(merged_data[col], kde=True, ax=axes[i])
    axes[i].set_title(f'Distribution of {col}')
    axes[i].set_xlabel(col)
    axes[i].set_ylabel('Frequency')

plt.tight_layout()
plt.show()
```

```{python}
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

features = [
     'TS%', '3PAr', 'FTr', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%', 'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'WS/48', 'OBPM', 'DBPM', 'BPM', 'VORP', 
]

#Prepare the data for training
X = merged_data[features]  # Features (input variables)
y = merged_data['PER']     # Target variable (Player Efficiency Rating)

X = X.dropna()
y = y[X.index]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R-squared: {r2}')

plt.scatter(y_test, y_pred)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual PER')
plt.ylabel('Predicted PER')
plt.title('Actual vs Predicted PER')
plt.show()
```

```{python}
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Load the dataset
merged_data = pd.read_csv('2425_merged_data.csv')

# Define the feature columns and target variable
features = [
    'TS%', '3PAr', 'FTr', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%', 'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'WS/48', 'OBPM', 'DBPM', 'BPM', 'VORP'
]
target = 'PER'

# 1. Handle missing values
merged_data = merged_data.dropna(subset=features + [target])  # Drop rows with missing target or features

# 2. Split data into features (X) and target (y)
X = merged_data[features]
y = merged_data[target]

# 3. Scale the features (important for some models)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 4. Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 5. Train the models (Linear Regression and Random Forest)
# Linear Regression
lin_model = LinearRegression()
lin_model.fit(X_train, y_train)

# Random Forest Regressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# 6. Make predictions
y_pred_lin = lin_model.predict(X_test)
y_pred_rf = rf_model.predict(X_test)

# 7. Evaluate the models
def evaluate_model(y_true, y_pred, model_name="Model"):
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)
    print(f"{model_name} Evaluation:")
    print(f"Mean Squared Error (MSE): {mse}")
    print(f"Root Mean Squared Error (RMSE): {rmse}")
    print(f"R-squared: {r2}")
    print("\n")

evaluate_model(y_test, y_pred_lin, "Linear Regression")
evaluate_model(y_test, y_pred_rf, "Random Forest Regressor")

# 8. Visualize Actual vs Predicted
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_lin, label='Linear Regression', alpha=0.6)
plt.scatter(y_test, y_pred_rf, label='Random Forest', alpha=0.6)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual PER')
plt.ylabel('Predicted PER')
plt.title('Actual vs Predicted PER')
plt.legend()
plt.show()

```